services:
  proxy:
    image: traefik:v3.1
    command: --providers.docker --api.insecure
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  ############## THE APP ITSELF ##############
  app:
    build:
      context: .
      target: dev
    volumes:
      - .:/usr/local/app
    ports:
      - 3000:3000
    environment:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_REGION: us-east-1
      AWS_ENDPOINT_URL: http://aws:4566
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      INVENTORY_SERVICE_BASE_URL: http://mock-inventory:8080
      PGHOST: postgres

  ############## DATABASE AND VISUALIZER ##############
  postgres:
    image: postgres
    volumes:
      - ./dev/db:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: catalog

  pgadmin:
    image: dpage/pgadmin4
    volumes:
      - ./dev/pgadmin/servers.json:/pgadmin4/servers.json
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin@mycomp.com
      PGADMIN_DEFAULT_PASSWORD: secret
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    depends_on:
      - postgres
    labels:
      traefik.http.routers.pgadmin.rule: Host(`pgadmin.localhost`)
      traefik.http.services.pgadmin.loadbalancer.server.port: 80

  ############## LOCAL AWS ##############
  aws:
    image: localstack/localstack
    labels:
      traefik.http.routers.aws.rule: Host(`aws.localhost`)
      traefik.http.services.aws.loadbalancer.server.port: 4566

  bucket-creator:
    image: localstack/localstack
    entrypoint: []
    command: awslocal --endpoint-url http://aws:4566 s3api create-bucket --bucket product-images
    depends_on:
      aws:
        condition: service_healthy

  ############## MOCK INVENTORY SERVICE ##############
  mock-inventory:
    image: wiremock/wiremock
    volumes:
      - ./dev/inventory-mocks:/home/wiremock
    labels:
      traefik.http.routers.mock-inventory.rule: Host(`inventory.localhost`)
      traefik.http.services.mock-inventory.loadbalancer.server.port: 8080

  ############## KAFKA AND VISUALIZATION ##############
  kafka:
    image: apache/kafka-native
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-topic-creator:
    image: apache/kafka
    command: /opt/kafka/bin/kafka-topics.sh --create --topic products --partitions 1 --replication-factor 1 --bootstrap-server kafka:9093
    depends_on:
      - kafka

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui:latest
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    depends_on:
      - kafka
    labels:
      traefik.http.routers.kafka-ui.rule: Host(`kafka.localhost`)
      traefik.http.services.kafka-ui.loadbalancer.server.port: 8080
