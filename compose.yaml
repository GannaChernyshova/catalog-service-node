services:

  ################## DEMO WEB CLIENT ##################
  demo-client:
    image: node:lts-slim
    working_dir: /usr/local/app
    command: yarn dev
    ports:
      - 5173:5173
    volumes:
      - ./dev/webapp:/usr/local/app

  ############## DATABASE AND VISUALIZER ##############
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: catalog

  mongo-express:
    image: mongo-express:1.0.0-alpha.4
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongodb:27017/
    depends_on:
      - mongodb

  ############## LOCAL AWS ##############
  aws:
    image: localstack/localstack:4.3.0
    ports:
      - "4566:4566"
    post_start:
      - command: awslocal s3api create-bucket --bucket product-images

  ############## MOCK INVENTORY SERVICE ##############
  mock-inventory:
    image: wiremock/wiremock:3.12.1
    ports:
      - 8090:8080
    volumes:
      - ./dev/inventory-mocks:/home/wiremock

  ############## KAFKA AND VISUALIZATION ##############
  kafka:
    image: apache/kafka:4.0.0
    ports:
      - 9092:9092
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    post_start:
      - command: /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic products --partitions 1 --replication-factor 1 --bootstrap-server kafka:9093

  kafka-ui:
    image: kafbat/kafka-ui:v1.2.0
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    depends_on:
      - kafka

volumes:
  mongodb_data:
